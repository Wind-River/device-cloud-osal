#!/usr/bin/env python
'''
Wind River lcov Wrapper Script

This script wraps lcov to work properly with files generated by llvm-cov.
llvm-cov doesn't generate a coverage for the function declaration statement
this script modifies the output file to fix this.

Copyright (C) 2015 Wind River Systems, Inc. All Rights Reserved.

The right to copy, distribute or otherwise make use of this software may
be licensed only pursuant to the terms of an applicable Wind River license
agreement.  No license to Wind River intellectual property rights is granted
herein.  All rights not licensed by Wind River are reserved by Wind River.
'''

import os
import re
import shutil
import subprocess
import sys
import tempfile

# Path to the lcov executable
LCOV_PATH = "@LCOV_COMMAND@"
# Flags to pass to llvm-cov executable
LCOV_ARGS = [ ]

# Fixes of the llvm-cov tool to mark function declaration lines as covered
def fix_info_file( info_file ):
	result = 1
	if os.path.isfile( info_file ):
		tmp_fd, tmp_path = tempfile.mkstemp()
		os.close( tmp_fd )
		with open( tmp_path, 'w' ) as tmp_file:
			da_regex = re.compile( "DA:(?P<line_number>\d+),(?P<hit_count>\d+)" )
			fn_regex = re.compile( "FN:(?P<line_number>\d+),(?P<function_name>\w+)" )
			sf_regex = re.compile( "SF:(?P<file_path>\S+)" )
			with open( info_file, 'r' ) as f:
				func_line = -1 # line number where current function started
				func_lines = [] # list of line numbers
				file_name = "" # name of the file containing functions
				hit_count = 0 # number of time function has been hit

				lines = f.readlines()
				for line in lines:
					sf = sf_regex.match( line )
					if sf:
						file_name = sf.group( "file_path" )
					elif line.startswith( "end_of_record" ):
						func_line = -1
						func_lines = []
						file_name = ""
						hit_count = 0
					elif len( file_name ) > 0:
						da = da_regex.match( line )
						fn = fn_regex.match( line )
						if fn:
							func_lines.append( int( fn.group( "line_number" ) ) )
						elif da:
							if len( func_lines ) > 0 and int( da.group( "line_number" ) ) == func_lines[0]:
								if func_line >= 0:
									tmp_file.write( "DA:%s,%s\n" % ( func_line, hit_count ) )
								func_line = int( da.group( "line_number" ) )
								hit_count = int( da.group( "hit_count" ) )
								func_lines.pop( 0 )
							elif func_line >= 0 and int( da.group( "line_number" ) ) > func_line:
								if len( func_lines ) == 0 or ( len( func_lines ) > 0 and int( da.group( "line_number" ) ) < func_lines[0] ):
									if hit_count == 0:
										hit_count = int( da.group( "hit_count" ) )
									tmp_file.write( "DA:%s,%s\n" % ( func_line, hit_count ) )
									func_line = -1
									hit_count = 0
					if func_line < 0:
						tmp_file.write( line )
				f.close()
			tmp_file.close()

		# move the new file over the old file
		os.remove( info_file )
		shutil.move( tmp_path, info_file )
		result = 0
	return result

# Simulates the "which" command of unix
def which( program ):
	def is_exe( fpath ):
		return os.path.isfile( fpath ) and os.access( fpath, os.X_OK )
	fpath, fname = os.path.split( program )

	if fpath:
		if is_exe( program ):
			return program
	else:
		for path in os.environ[ "PATH" ].split( os.pathsep ):
			path = path.strip( '"' )
			exe_file = os.path.join( path, program )
			if is_exe(exe_file):
				return exe_file
	return None


# Starting function of the script
# argv - arguments to run
def main( argv=None ):
	global LCOV_PATH, LCOV_ARGS

	# if no arguments passed to function take arguments passed to script
	if argv is None:
		argv = sys.argv

	# Try and find a valid compiler if one not given above
	if not os.path.isfile( LCOV_PATH ):
		LCOV_PATH = which( "lcov" )

	try:
		cmd = [ LCOV_PATH ]
		cmd.extend( LCOV_ARGS )
		if len( argv ) > 1:
			cmd.extend( argv[1::] )
		return_code = subprocess.call( cmd )
		if return_code == 0:
			file_name = ""
			for arg in cmd:
				if arg.startswith( "-o" ) or arg.startswith( "--output-file" ):
					if arg.find( "=" ) > 0:
						file_name = arg.split( "=", 1 )[1]
					else:
						file_name = "*"
				elif file_name == "*":
					file_name = arg

				if len( file_name ) > 0 and file_name != "*":
					return_code += fix_info_file( file_name )
					file_name = ""
		return return_code

	except Exception as e:
		print >>sys.stderr, e
		return 2

# Call the main method when running as a script
if __name__ == "__main__":
	sys.exit( main() )

